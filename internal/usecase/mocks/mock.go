// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interfaces.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/maxyong7/chat-messaging-app/internal/entity"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockUser) RegisterUser(arg0 context.Context, arg1 entity.UserRegistration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserMockRecorder) RegisterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUser)(nil).RegisterUser), arg0, arg1)
}

// VerifyCredentials mocks base method.
func (m *MockUser) VerifyCredentials(arg0 context.Context, arg1 entity.UserCredentials) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCredentials", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifyCredentials indicates an expected call of VerifyCredentials.
func (mr *MockUserMockRecorder) VerifyCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCredentials", reflect.TypeOf((*MockUser)(nil).VerifyCredentials), arg0, arg1)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CheckUserExist mocks base method.
func (m *MockUserRepo) CheckUserExist(arg0 context.Context, arg1 entity.UserRegistrationDTO) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExist indicates an expected call of CheckUserExist.
func (mr *MockUserRepoMockRecorder) CheckUserExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExist", reflect.TypeOf((*MockUserRepo)(nil).CheckUserExist), arg0, arg1)
}

// GetUserCredentials mocks base method.
func (m *MockUserRepo) GetUserCredentials(arg0 context.Context, arg1 entity.UserCredentialsDTO) (*entity.UserCredentialsDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCredentials", arg0, arg1)
	ret0, _ := ret[0].(*entity.UserCredentialsDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCredentials indicates an expected call of GetUserCredentials.
func (mr *MockUserRepoMockRecorder) GetUserCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCredentials", reflect.TypeOf((*MockUserRepo)(nil).GetUserCredentials), arg0, arg1)
}

// GetUserProfile mocks base method.
func (m *MockUserRepo) GetUserProfile(arg0 context.Context, arg1 string) (*entity.UserProfileDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", arg0, arg1)
	ret0, _ := ret[0].(*entity.UserProfileDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserRepoMockRecorder) GetUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserRepo)(nil).GetUserProfile), arg0, arg1)
}

// GetUserUUIDByUsername mocks base method.
func (m *MockUserRepo) GetUserUUIDByUsername(arg0 context.Context, arg1 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserUUIDByUsername", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserUUIDByUsername indicates an expected call of GetUserUUIDByUsername.
func (mr *MockUserRepoMockRecorder) GetUserUUIDByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserUUIDByUsername", reflect.TypeOf((*MockUserRepo)(nil).GetUserUUIDByUsername), arg0, arg1)
}

// StoreUserInfo mocks base method.
func (m *MockUserRepo) StoreUserInfo(arg0 context.Context, arg1 entity.UserRegistrationDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUserInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUserInfo indicates an expected call of StoreUserInfo.
func (mr *MockUserRepoMockRecorder) StoreUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUserInfo", reflect.TypeOf((*MockUserRepo)(nil).StoreUserInfo), arg0, arg1)
}

// UpdateUserProfile mocks base method.
func (m *MockUserRepo) UpdateUserProfile(ctx context.Context, userInfo entity.UserProfileDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUserRepoMockRecorder) UpdateUserProfile(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUserRepo)(nil).UpdateUserProfile), ctx, userInfo)
}

// MockConversation is a mock of Conversation interface.
type MockConversation struct {
	ctrl     *gomock.Controller
	recorder *MockConversationMockRecorder
}

// MockConversationMockRecorder is the mock recorder for MockConversation.
type MockConversationMockRecorder struct {
	mock *MockConversation
}

// NewMockConversation creates a new mock instance.
func NewMockConversation(ctrl *gomock.Controller) *MockConversation {
	mock := &MockConversation{ctrl: ctrl}
	mock.recorder = &MockConversationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversation) EXPECT() *MockConversationMockRecorder {
	return m.recorder
}

// GetConversationList mocks base method.
func (m *MockConversation) GetConversationList(arg0 context.Context, arg1 entity.RequestParams) ([]entity.ConversationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationList", arg0, arg1)
	ret0, _ := ret[0].([]entity.ConversationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationList indicates an expected call of GetConversationList.
func (mr *MockConversationMockRecorder) GetConversationList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationList", reflect.TypeOf((*MockConversation)(nil).GetConversationList), arg0, arg1)
}

// StoreConversationAndMessage mocks base method.
func (m *MockConversation) StoreConversationAndMessage(ctx context.Context, conv entity.Conversation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreConversationAndMessage", ctx, conv)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreConversationAndMessage indicates an expected call of StoreConversationAndMessage.
func (mr *MockConversationMockRecorder) StoreConversationAndMessage(ctx, conv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreConversationAndMessage", reflect.TypeOf((*MockConversation)(nil).StoreConversationAndMessage), ctx, conv)
}

// MockConversationRepo is a mock of ConversationRepo interface.
type MockConversationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockConversationRepoMockRecorder
}

// MockConversationRepoMockRecorder is the mock recorder for MockConversationRepo.
type MockConversationRepoMockRecorder struct {
	mock *MockConversationRepo
}

// NewMockConversationRepo creates a new mock instance.
func NewMockConversationRepo(ctrl *gomock.Controller) *MockConversationRepo {
	mock := &MockConversationRepo{ctrl: ctrl}
	mock.recorder = &MockConversationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversationRepo) EXPECT() *MockConversationRepoMockRecorder {
	return m.recorder
}

// GetConversationList mocks base method.
func (m *MockConversationRepo) GetConversationList(arg0 context.Context, arg1 entity.RequestParamsDTO) ([]entity.ConversationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationList", arg0, arg1)
	ret0, _ := ret[0].([]entity.ConversationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationList indicates an expected call of GetConversationList.
func (mr *MockConversationRepoMockRecorder) GetConversationList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationList", reflect.TypeOf((*MockConversationRepo)(nil).GetConversationList), arg0, arg1)
}

// InsertConversationAndMessage mocks base method.
func (m *MockConversationRepo) InsertConversationAndMessage(ctx context.Context, convDTO entity.ConversationDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertConversationAndMessage", ctx, convDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertConversationAndMessage indicates an expected call of InsertConversationAndMessage.
func (mr *MockConversationRepoMockRecorder) InsertConversationAndMessage(ctx, convDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertConversationAndMessage", reflect.TypeOf((*MockConversationRepo)(nil).InsertConversationAndMessage), ctx, convDTO)
}

// MockContact is a mock of Contact interface.
type MockContact struct {
	ctrl     *gomock.Controller
	recorder *MockContactMockRecorder
}

// MockContactMockRecorder is the mock recorder for MockContact.
type MockContactMockRecorder struct {
	mock *MockContact
}

// NewMockContact creates a new mock instance.
func NewMockContact(ctrl *gomock.Controller) *MockContact {
	mock := &MockContact{ctrl: ctrl}
	mock.recorder = &MockContactMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContact) EXPECT() *MockContactMockRecorder {
	return m.recorder
}

// AddContact mocks base method.
func (m *MockContact) AddContact(ctx context.Context, contactUserName, userUuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContact", ctx, contactUserName, userUuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContact indicates an expected call of AddContact.
func (mr *MockContactMockRecorder) AddContact(ctx, contactUserName, userUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContact", reflect.TypeOf((*MockContact)(nil).AddContact), ctx, contactUserName, userUuid)
}

// GetContacts mocks base method.
func (m *MockContact) GetContacts(ctx context.Context, userUuid string) ([]entity.Contacts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", ctx, userUuid)
	ret0, _ := ret[0].([]entity.Contacts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockContactMockRecorder) GetContacts(ctx, userUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockContact)(nil).GetContacts), ctx, userUuid)
}

// RemoveContact mocks base method.
func (m *MockContact) RemoveContact(ctx context.Context, contactUserName, userUuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContact", ctx, contactUserName, userUuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContact indicates an expected call of RemoveContact.
func (mr *MockContactMockRecorder) RemoveContact(ctx, contactUserName, userUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContact", reflect.TypeOf((*MockContact)(nil).RemoveContact), ctx, contactUserName, userUuid)
}

// UpdateBlockContact mocks base method.
func (m *MockContact) UpdateBlockContact(ctx context.Context, contactUserName, userUuid string, block bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockContact", ctx, contactUserName, userUuid, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockContact indicates an expected call of UpdateBlockContact.
func (mr *MockContactMockRecorder) UpdateBlockContact(ctx, contactUserName, userUuid, block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockContact", reflect.TypeOf((*MockContact)(nil).UpdateBlockContact), ctx, contactUserName, userUuid, block)
}

// MockContactsRepo is a mock of ContactsRepo interface.
type MockContactsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockContactsRepoMockRecorder
}

// MockContactsRepoMockRecorder is the mock recorder for MockContactsRepo.
type MockContactsRepoMockRecorder struct {
	mock *MockContactsRepo
}

// NewMockContactsRepo creates a new mock instance.
func NewMockContactsRepo(ctrl *gomock.Controller) *MockContactsRepo {
	mock := &MockContactsRepo{ctrl: ctrl}
	mock.recorder = &MockContactsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactsRepo) EXPECT() *MockContactsRepoMockRecorder {
	return m.recorder
}

// CheckContactExist mocks base method.
func (m *MockContactsRepo) CheckContactExist(ctx context.Context, userUuid, contactUserUuid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckContactExist", ctx, userUuid, contactUserUuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckContactExist indicates an expected call of CheckContactExist.
func (mr *MockContactsRepoMockRecorder) CheckContactExist(ctx, userUuid, contactUserUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckContactExist", reflect.TypeOf((*MockContactsRepo)(nil).CheckContactExist), ctx, userUuid, contactUserUuid)
}

// GetContactsByUserUUID mocks base method.
func (m *MockContactsRepo) GetContactsByUserUUID(ctx context.Context, userUuid string) ([]entity.Contacts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactsByUserUUID", ctx, userUuid)
	ret0, _ := ret[0].([]entity.Contacts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactsByUserUUID indicates an expected call of GetContactsByUserUUID.
func (mr *MockContactsRepoMockRecorder) GetContactsByUserUUID(ctx, userUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactsByUserUUID", reflect.TypeOf((*MockContactsRepo)(nil).GetContactsByUserUUID), ctx, userUuid)
}

// StoreContacts mocks base method.
func (m *MockContactsRepo) StoreContacts(arg0 context.Context, arg1 entity.ContactsDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreContacts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreContacts indicates an expected call of StoreContacts.
func (mr *MockContactsRepoMockRecorder) StoreContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreContacts", reflect.TypeOf((*MockContactsRepo)(nil).StoreContacts), arg0, arg1)
}

// UpdateBlockedStatus mocks base method.
func (m *MockContactsRepo) UpdateBlockedStatus(arg0 context.Context, arg1 entity.ContactsDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockedStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockedStatus indicates an expected call of UpdateBlockedStatus.
func (mr *MockContactsRepoMockRecorder) UpdateBlockedStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockedStatus", reflect.TypeOf((*MockContactsRepo)(nil).UpdateBlockedStatus), arg0, arg1)
}

// UpdateRemovedStatus mocks base method.
func (m *MockContactsRepo) UpdateRemovedStatus(arg0 context.Context, arg1 entity.ContactsDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemovedStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemovedStatus indicates an expected call of UpdateRemovedStatus.
func (mr *MockContactsRepoMockRecorder) UpdateRemovedStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemovedStatus", reflect.TypeOf((*MockContactsRepo)(nil).UpdateRemovedStatus), arg0, arg1)
}

// MockMessageRepo is a mock of MessageRepo interface.
type MockMessageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepoMockRecorder
}

// MockMessageRepoMockRecorder is the mock recorder for MockMessageRepo.
type MockMessageRepoMockRecorder struct {
	mock *MockMessageRepo
}

// NewMockMessageRepo creates a new mock instance.
func NewMockMessageRepo(ctrl *gomock.Controller) *MockMessageRepo {
	mock := &MockMessageRepo{ctrl: ctrl}
	mock.recorder = &MockMessageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepo) EXPECT() *MockMessageRepoMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockMessageRepo) DeleteMessage(ctx context.Context, msg entity.MessageDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageRepoMockRecorder) DeleteMessage(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageRepo)(nil).DeleteMessage), ctx, msg)
}

// GetMessages mocks base method.
func (m *MockMessageRepo) GetMessages(ctx context.Context, reqParam entity.RequestParamsDTO, conversationUUID string) ([]entity.GetMessageDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, reqParam, conversationUUID)
	ret0, _ := ret[0].([]entity.GetMessageDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockMessageRepoMockRecorder) GetMessages(ctx, reqParam, conversationUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockMessageRepo)(nil).GetMessages), ctx, reqParam, conversationUUID)
}

// GetSeenStatus mocks base method.
func (m *MockMessageRepo) GetSeenStatus(ctx context.Context, messageUUID string) ([]entity.GetSeenStatusDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeenStatus", ctx, messageUUID)
	ret0, _ := ret[0].([]entity.GetSeenStatusDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeenStatus indicates an expected call of GetSeenStatus.
func (mr *MockMessageRepoMockRecorder) GetSeenStatus(ctx, messageUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeenStatus", reflect.TypeOf((*MockMessageRepo)(nil).GetSeenStatus), ctx, messageUUID)
}

// SearchMessage mocks base method.
func (m *MockMessageRepo) SearchMessage(ctx context.Context, keyword, conversationUUID string) ([]entity.SearchMessageDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMessage", ctx, keyword, conversationUUID)
	ret0, _ := ret[0].([]entity.SearchMessageDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessage indicates an expected call of SearchMessage.
func (mr *MockMessageRepoMockRecorder) SearchMessage(ctx, keyword, conversationUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessage", reflect.TypeOf((*MockMessageRepo)(nil).SearchMessage), ctx, keyword, conversationUUID)
}

// UpdateSeenStatus mocks base method.
func (m *MockMessageRepo) UpdateSeenStatus(ctx context.Context, seenStatus entity.SeenStatusDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeenStatus", ctx, seenStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeenStatus indicates an expected call of UpdateSeenStatus.
func (mr *MockMessageRepoMockRecorder) UpdateSeenStatus(ctx, seenStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeenStatus", reflect.TypeOf((*MockMessageRepo)(nil).UpdateSeenStatus), ctx, seenStatus)
}

// ValidateMessageSentByUser mocks base method.
func (m *MockMessageRepo) ValidateMessageSentByUser(ctx context.Context, msg entity.MessageDTO) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateMessageSentByUser", ctx, msg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateMessageSentByUser indicates an expected call of ValidateMessageSentByUser.
func (mr *MockMessageRepoMockRecorder) ValidateMessageSentByUser(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateMessageSentByUser", reflect.TypeOf((*MockMessageRepo)(nil).ValidateMessageSentByUser), ctx, msg)
}

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockMessage) DeleteMessage(ctx context.Context, msg entity.Message) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, msg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageMockRecorder) DeleteMessage(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessage)(nil).DeleteMessage), ctx, msg)
}

// GetMessagesFromConversation mocks base method.
func (m *MockMessage) GetMessagesFromConversation(ctx context.Context, reqParam entity.RequestParams, conversationUUID string) ([]entity.GetMessageDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesFromConversation", ctx, reqParam, conversationUUID)
	ret0, _ := ret[0].([]entity.GetMessageDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesFromConversation indicates an expected call of GetMessagesFromConversation.
func (mr *MockMessageMockRecorder) GetMessagesFromConversation(ctx, reqParam, conversationUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesFromConversation", reflect.TypeOf((*MockMessage)(nil).GetMessagesFromConversation), ctx, reqParam, conversationUUID)
}

// GetSeenStatus mocks base method.
func (m *MockMessage) GetSeenStatus(ctx context.Context, messageUUID string) ([]entity.GetSeenStatusDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeenStatus", ctx, messageUUID)
	ret0, _ := ret[0].([]entity.GetSeenStatusDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeenStatus indicates an expected call of GetSeenStatus.
func (mr *MockMessageMockRecorder) GetSeenStatus(ctx, messageUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeenStatus", reflect.TypeOf((*MockMessage)(nil).GetSeenStatus), ctx, messageUUID)
}

// SearchMessage mocks base method.
func (m *MockMessage) SearchMessage(ctx context.Context, keyword, conversationUUID string) ([]entity.SearchMessageDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMessage", ctx, keyword, conversationUUID)
	ret0, _ := ret[0].([]entity.SearchMessageDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessage indicates an expected call of SearchMessage.
func (mr *MockMessageMockRecorder) SearchMessage(ctx, keyword, conversationUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessage", reflect.TypeOf((*MockMessage)(nil).SearchMessage), ctx, keyword, conversationUUID)
}

// UpdateSeenStatus mocks base method.
func (m *MockMessage) UpdateSeenStatus(ctx context.Context, seenStatus entity.SeenStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeenStatus", ctx, seenStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeenStatus indicates an expected call of UpdateSeenStatus.
func (mr *MockMessageMockRecorder) UpdateSeenStatus(ctx, seenStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeenStatus", reflect.TypeOf((*MockMessage)(nil).UpdateSeenStatus), ctx, seenStatus)
}

// MockReactionRepo is a mock of ReactionRepo interface.
type MockReactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockReactionRepoMockRecorder
}

// MockReactionRepoMockRecorder is the mock recorder for MockReactionRepo.
type MockReactionRepoMockRecorder struct {
	mock *MockReactionRepo
}

// NewMockReactionRepo creates a new mock instance.
func NewMockReactionRepo(ctrl *gomock.Controller) *MockReactionRepo {
	mock := &MockReactionRepo{ctrl: ctrl}
	mock.recorder = &MockReactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReactionRepo) EXPECT() *MockReactionRepoMockRecorder {
	return m.recorder
}

// GetReactions mocks base method.
func (m *MockReactionRepo) GetReactions(ctx context.Context, messageUUID string) ([]entity.GetReactionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReactions", ctx, messageUUID)
	ret0, _ := ret[0].([]entity.GetReactionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReactions indicates an expected call of GetReactions.
func (mr *MockReactionRepoMockRecorder) GetReactions(ctx, messageUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReactions", reflect.TypeOf((*MockReactionRepo)(nil).GetReactions), ctx, messageUUID)
}

// RemoveReaction mocks base method.
func (m *MockReactionRepo) RemoveReaction(ctx context.Context, rr entity.RemoveReactionDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReaction", ctx, rr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReaction indicates an expected call of RemoveReaction.
func (mr *MockReactionRepoMockRecorder) RemoveReaction(ctx, rr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReaction", reflect.TypeOf((*MockReactionRepo)(nil).RemoveReaction), ctx, rr)
}

// StoreReaction mocks base method.
func (m *MockReactionRepo) StoreReaction(ctx context.Context, srDTO entity.StoreReactionDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreReaction", ctx, srDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreReaction indicates an expected call of StoreReaction.
func (mr *MockReactionRepoMockRecorder) StoreReaction(ctx, srDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreReaction", reflect.TypeOf((*MockReactionRepo)(nil).StoreReaction), ctx, srDTO)
}

// MockReaction is a mock of Reaction interface.
type MockReaction struct {
	ctrl     *gomock.Controller
	recorder *MockReactionMockRecorder
}

// MockReactionMockRecorder is the mock recorder for MockReaction.
type MockReactionMockRecorder struct {
	mock *MockReaction
}

// NewMockReaction creates a new mock instance.
func NewMockReaction(ctrl *gomock.Controller) *MockReaction {
	mock := &MockReaction{ctrl: ctrl}
	mock.recorder = &MockReactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaction) EXPECT() *MockReactionMockRecorder {
	return m.recorder
}

// RemoveReaction mocks base method.
func (m *MockReaction) RemoveReaction(ctx context.Context, reaction entity.Reaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReaction", ctx, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReaction indicates an expected call of RemoveReaction.
func (mr *MockReactionMockRecorder) RemoveReaction(ctx, reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReaction", reflect.TypeOf((*MockReaction)(nil).RemoveReaction), ctx, reaction)
}

// StoreReaction mocks base method.
func (m *MockReaction) StoreReaction(ctx context.Context, reaction entity.Reaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreReaction", ctx, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreReaction indicates an expected call of StoreReaction.
func (mr *MockReactionMockRecorder) StoreReaction(ctx, reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreReaction", reflect.TypeOf((*MockReaction)(nil).StoreReaction), ctx, reaction)
}

// MockGroupChatRepo is a mock of GroupChatRepo interface.
type MockGroupChatRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGroupChatRepoMockRecorder
}

// MockGroupChatRepoMockRecorder is the mock recorder for MockGroupChatRepo.
type MockGroupChatRepoMockRecorder struct {
	mock *MockGroupChatRepo
}

// NewMockGroupChatRepo creates a new mock instance.
func NewMockGroupChatRepo(ctrl *gomock.Controller) *MockGroupChatRepo {
	mock := &MockGroupChatRepo{ctrl: ctrl}
	mock.recorder = &MockGroupChatRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupChatRepo) EXPECT() *MockGroupChatRepoMockRecorder {
	return m.recorder
}

// AddParticipants mocks base method.
func (m *MockGroupChatRepo) AddParticipants(ctx context.Context, groupChat entity.GroupChatDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddParticipants", ctx, groupChat)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddParticipants indicates an expected call of AddParticipants.
func (mr *MockGroupChatRepoMockRecorder) AddParticipants(ctx, groupChat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddParticipants", reflect.TypeOf((*MockGroupChatRepo)(nil).AddParticipants), ctx, groupChat)
}

// CreateGroupChat mocks base method.
func (m *MockGroupChatRepo) CreateGroupChat(ctx context.Context, groupChat entity.GroupChatDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupChat", ctx, groupChat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroupChat indicates an expected call of CreateGroupChat.
func (mr *MockGroupChatRepoMockRecorder) CreateGroupChat(ctx, groupChat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupChat", reflect.TypeOf((*MockGroupChatRepo)(nil).CreateGroupChat), ctx, groupChat)
}

// RemoveParticipants mocks base method.
func (m *MockGroupChatRepo) RemoveParticipants(ctx context.Context, groupChat entity.GroupChatDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveParticipants", ctx, groupChat)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveParticipants indicates an expected call of RemoveParticipants.
func (mr *MockGroupChatRepoMockRecorder) RemoveParticipants(ctx, groupChat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveParticipants", reflect.TypeOf((*MockGroupChatRepo)(nil).RemoveParticipants), ctx, groupChat)
}

// UpdateGroupTitle mocks base method.
func (m *MockGroupChatRepo) UpdateGroupTitle(ctx context.Context, groupChat entity.GroupChatDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupTitle", ctx, groupChat)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupTitle indicates an expected call of UpdateGroupTitle.
func (mr *MockGroupChatRepoMockRecorder) UpdateGroupTitle(ctx, groupChat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupTitle", reflect.TypeOf((*MockGroupChatRepo)(nil).UpdateGroupTitle), ctx, groupChat)
}

// ValidateUserInGroupChat mocks base method.
func (m *MockGroupChatRepo) ValidateUserInGroupChat(ctx context.Context, conversationUUID, userUUID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUserInGroupChat", ctx, conversationUUID, userUUID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUserInGroupChat indicates an expected call of ValidateUserInGroupChat.
func (mr *MockGroupChatRepoMockRecorder) ValidateUserInGroupChat(ctx, conversationUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUserInGroupChat", reflect.TypeOf((*MockGroupChatRepo)(nil).ValidateUserInGroupChat), ctx, conversationUUID, userUUID)
}

// MockGroupChat is a mock of GroupChat interface.
type MockGroupChat struct {
	ctrl     *gomock.Controller
	recorder *MockGroupChatMockRecorder
}

// MockGroupChatMockRecorder is the mock recorder for MockGroupChat.
type MockGroupChatMockRecorder struct {
	mock *MockGroupChat
}

// NewMockGroupChat creates a new mock instance.
func NewMockGroupChat(ctrl *gomock.Controller) *MockGroupChat {
	mock := &MockGroupChat{ctrl: ctrl}
	mock.recorder = &MockGroupChatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupChat) EXPECT() *MockGroupChatMockRecorder {
	return m.recorder
}

// AddParticipant mocks base method.
func (m *MockGroupChat) AddParticipant(ctx context.Context, groupChat entity.GroupChat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddParticipant", ctx, groupChat)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddParticipant indicates an expected call of AddParticipant.
func (mr *MockGroupChatMockRecorder) AddParticipant(ctx, groupChat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddParticipant", reflect.TypeOf((*MockGroupChat)(nil).AddParticipant), ctx, groupChat)
}

// CreateGroupChat mocks base method.
func (m *MockGroupChat) CreateGroupChat(ctx context.Context, groupChat entity.GroupChat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupChat", ctx, groupChat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroupChat indicates an expected call of CreateGroupChat.
func (mr *MockGroupChatMockRecorder) CreateGroupChat(ctx, groupChat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupChat", reflect.TypeOf((*MockGroupChat)(nil).CreateGroupChat), ctx, groupChat)
}

// RemoveParticipant mocks base method.
func (m *MockGroupChat) RemoveParticipant(ctx context.Context, groupChat entity.GroupChat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveParticipant", ctx, groupChat)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveParticipant indicates an expected call of RemoveParticipant.
func (mr *MockGroupChatMockRecorder) RemoveParticipant(ctx, groupChat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveParticipant", reflect.TypeOf((*MockGroupChat)(nil).RemoveParticipant), ctx, groupChat)
}

// UpdateGroupTitle mocks base method.
func (m *MockGroupChat) UpdateGroupTitle(ctx context.Context, groupChat entity.GroupChat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupTitle", ctx, groupChat)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupTitle indicates an expected call of UpdateGroupTitle.
func (mr *MockGroupChatMockRecorder) UpdateGroupTitle(ctx, groupChat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupTitle", reflect.TypeOf((*MockGroupChat)(nil).UpdateGroupTitle), ctx, groupChat)
}

// MockUserProfile is a mock of UserProfile interface.
type MockUserProfile struct {
	ctrl     *gomock.Controller
	recorder *MockUserProfileMockRecorder
}

// MockUserProfileMockRecorder is the mock recorder for MockUserProfile.
type MockUserProfileMockRecorder struct {
	mock *MockUserProfile
}

// NewMockUserProfile creates a new mock instance.
func NewMockUserProfile(ctrl *gomock.Controller) *MockUserProfile {
	mock := &MockUserProfile{ctrl: ctrl}
	mock.recorder = &MockUserProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProfile) EXPECT() *MockUserProfileMockRecorder {
	return m.recorder
}

// GetUserProfile mocks base method.
func (m *MockUserProfile) GetUserProfile(ctx context.Context, userUUID string) (entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx, userUUID)
	ret0, _ := ret[0].(entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserProfileMockRecorder) GetUserProfile(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserProfile)(nil).GetUserProfile), ctx, userUUID)
}

// UpdateUserProfile mocks base method.
func (m *MockUserProfile) UpdateUserProfile(ctx context.Context, userInfo entity.UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUserProfileMockRecorder) UpdateUserProfile(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUserProfile)(nil).UpdateUserProfile), ctx, userInfo)
}
